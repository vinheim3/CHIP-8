#sN 80
#sK 84
#sDot 89
#sL 89
#sR 8E
#sW 93
#mNodes 801
#mFinish FFF
#dFinishCheck FF
#dUp 5
#dLeft 7
#dDown 8
#dRight 9

JP ->after-subroutines

:Place fruit ensuring it's not on snake
Place-fruit:
    VD ~= 3F
    VE ~= 1F
    I = sDot
    DRW VD VE 1
    if VF != 1
        return
    DRW VD VE 1
    JP ->Place-fruit

:Clear nodes
Clear-nodes:
    I = mNodes
    V1 = 1
  clear-next:
    V0 = [I]
    if V0 == 0
        return
    if V0 == dFinishCheck
        return
    V0 = 0
    [I] = V0
    I += V1
    JP ->clear-next

:load sprites
after-subroutines:
    V0, V1, V2, V3, V4, V5, V6, V7 = 90, D0, F0, B0, 90, A0, C0, A0
    V8, V9, VA, VB, VC, VD, I = 90, 80, 80, 80, 80, F0, sN
    [I] = VE

    V0, V1, V2, V3, V4 = E0, 90, E0, A0, 90
    V5, V6, V7, V8, V9, I = 88, 88, 88, A8, 50, sR
    [I] = V9

:draw SNAKE
    V0, V1, V2 = 14, D, 5
    I = V2 font
    DRW V0 V1 5
    I = sN
    V0 += 5
    DRW V0 V1 5
    V2 = A
    I = V2 font
    V0 += 5
    DRW V0 V1 5
    I = sK
    V0 += 5
    DRW V0 V1 5
    V2 = E
    I = V2 font
    V0 += 5
    DRW V0 V1 5

:store memory finish
    V0 = dFinishCheck
    I = mFinish
    [I] = V0

:wait for key press then clear screen
    V0 = key
    CLS

:create head and 2 nodes to its right
start-game:
    LD I sDot
    VB ~= 3F
    VC ~= 1F
    DRW VB VC 1
    V0 = VB + 1
    DRW V0 VC 1
    V0 += 1
    DRW V0 VC 1
    VA, V0, V1 = 2, 3, 3
    I = mNodes
    [I] = V1

CALL ->Place-fruit

:check keyboard input every V0/60 seconds
start-game-loop:
    V0 = 1
  short-game-loop:
    V7, V8, V5 = VB, VC, 4
    V6 = VA >> 1
    delay = V0
  check-timer:
    V0 = delay
    if V0 == 0
        JP ->moving-head

:check first wasd key pressed
    if V5 != 4
        JP ->check-timer
    V1, V2, V3, V4 = dUp, dLeft, dDown, dRight
    if V1 pressed
        JP ->w-pressed
    if V2 pressed
        JP ->a-pressed
    if V3 pressed
        JP ->s-pressed
    if V4 pressed
        JP ->d-pressed
    JP ->after-keyboard
  w-pressed:
    if V6 != 0
        V5 = 0
    JP ->after-keyboard
  a-pressed:
    if V6 == 0
        V5 = 2
    JP ->after-keyboard
  s-pressed:
    if V6 != 0
        V5 = 1
    JP ->after-keyboard
  d-pressed:
    if V6 == 0
        V5 = 3
  after-keyboard:
    JP ->check-timer

:change head vars depending on direction
moving-head:
    if V5 != 4
        VA = V5
    V1, V2 = 3F, 1F
    V0 = VA >> 1
    if V0 != 0
        JP ->head-left-right
    VC += 1F
    if VF != 0
        VC += 2
    VC &= V2
    JP ->draw-head
  head-left-right:
    VB += 3F
    if VF != 0
        VB += 2
    VB &= V1
  draw-head:
    I = sDot
    DRW VB VC 1

:check collision
    if VF != 0
        JP ->collision
    V9 = 0
    JP ->shift-nodes
  collision:
    if VB != VD
        JP ->lose-game
    if VC != VE
        JP ->lose-game
    V9, I = 1, sDot
    DRW VD VE 1
    JP ->shift-nodes

lose-game:
    CLS
    V0, V1, I = 14, D, sL
    DRW V0 V1 5
    V2 = 0
    I = V2 font
    V0 += 5
    DRW V0 V1 5
    V2 = 5
    I = V2 font
    V0 += 5
    DRW V0 V1 5
    V2 = E
    I = V2 font
    V0 += 5
    DRW V0 V1 5
    I = sR
    V0 += 5
    DRW V0 V1 5
    V0 = key
    CLS
    CALL ->Clear-nodes
    JP ->start-game

shift-nodes:
    V1, V2, V3 = 3F, 1F, 1
    V5 = VA + 1
    I = mNodes
  shift-next-node:
    V0 = [I]
    if V0 == 0
        JP ->done-shifting
    V0 -= V3
    V0 >> 1
    if V0 != 0
        JP ->node-left-right
    V8 += 1F
    if VF != 1
        V8 += 2
    V8 &= V2
    JP ->swap-nodes
  node-left-right:
    V7 += 3F
    if VF != 1
        V7 += 2
    V7 &= V1

swap-nodes:
    V0 = [I]
    if V0 == dFinishCheck
        JP ->win-screen
    V6 = V0
    V0 = V5
    [I], V5 = V0, V6
    V0 = 1
    I += V0
    JP ->shift-next-node

win-screen:
    CLS
    V0, V1, I = 1A, D, sW
    DRW V0 V1 5
    V0, I = 20, sL
    DRW V0 V1 4
    V1 = 11
    DRW V0 V1 1
    V0, V1, I = 22, D, sN
    DRW V0 V1 5
    V0 = key
    CLS
    CALL ->Clear-nodes
    JP ->start-game

:extend tail if needed
done-shifting:
    if V9 != 0
        JP ->fruit-eaten
    I = sDot
    DRW V7 V8 1
    JP ->start-game-loop
  fruit-eaten:
    V0 = V5
    [I] = V0
    V0 = 1
    sound = V0
    CALL ->Place-fruit
    V0 = 0
    JP ->short-game-loop